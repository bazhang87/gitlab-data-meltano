apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-production-meltano
  namespace: meltano
  labels:
    version: "1.0.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: meltano-tap
  template:
    metadata:
      labels:
        app: meltano-tap
    spec:
      serviceAccount: default
      serviceAccountName: default
      containers:
      - name: meltano-tap
        image: registry.gitlab.com/gitlab-data/gitlab-data-meltano:v.1.2
        imagePullPolicy: Always
        resources:
            limits:
              memory: "12000Mi"
              cpu: "3000m"
            requests:
              memory: "12000Mi"
              cpu: "3000m"
        env:
        # Kubernetes Secrets :: Databases
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: airflow-db
              key: username
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: airflow-db
              key: password
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: airflow-db
              key: database
        - name: MELTANO_DATABASE_URI
          valueFrom:
            secretKeyRef:
              name: meltano-db
              key: db_connection

        # Kubernetes Secrets :: Xactly
        - name: TAP_XACTLY_USER
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: tap_xactly_user
        - name: TAP_XACTLY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: tap_xactly_password
        - name: TAP_XACTLY_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: tap_xactly_client_id
        - name: TAP_XACTLY_CONSUMER
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: tap_xactly_consumer
        
        # Kubernetes Secrets :: zengrc
        - name: ZENGRC_USERNAME
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: ZENGRC_USERNAME
        - name: ZENGRC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: ZENGRC_PASSWORD
        
        # Kubernetes Secrets :: Adaptive 
        - name: TAP_ADAPTIVE_USERNAME
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_ADAPTIVE_USERNAME
        - name: TAP_ADAPTIVE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_ADAPTIVE_PASSWORD

        # Kubernetes Secrets :: EdCast
        - name: TAP_EDCAST_USERNAME
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_EDCAST_USERNAME
        - name: TAP_EDCAST_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_EDCAST_PASSWORD
        - name: TAP_EDCAST_START_DATE
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_EDCAST_START_DATE
        - name: TAP_EDCAST_END_DATE
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_EDCAST_END_DATE
        - name: TAP_EDCAST_URL_BASE
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_EDCAST_URL_BASE
        - name: TARGET_EDCAST_SNOWFLAKE_USERNAME
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TARGET_EDCAST_SNOWFLAKE_USERNAME
        - name: TARGET_EDCAST_SNOWFLAKE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TARGET_EDCAST_SNOWFLAKE_PASSWORD

        # Kubernetes Secrets :: ZenDesk
        - name: TAP_ZENDESK_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_ZENDESK_API_TOKEN
        - name: TAP_ZENDESK_EMAIL
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_ZENDESK_EMAIL
        - name: TAP_ZENDESK_START_DATE
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_ZENDESK_START_DATE
        - name: TAP_ZENDESK_SUBDOMAIN
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_ZENDESK_SUBDOMAIN

        # Kubernetes Secrets :: ZenDesk Community Relations
        - name: TAP_ZENDESK_COMMUNITY_RELATIONS_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_ZENDESK_COMMUNITY_RELATIONS_API_TOKEN
        - name: TAP_ZENDESK_COMMUNITY_RELATIONS_EMAIL
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_ZENDESK_COMMUNITY_RELATIONS_EMAIL
        - name: TAP_ZENDESK_COMMUNITY_RELATIONS_START_DATE
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_ZENDESK_COMMUNITY_RELATIONS_START_DATE
        - name: TAP_ZENDESK_COMMUNITY_RELATIONS_SUBDOMAIN
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: TAP_ZENDESK_COMMUNITY_RELATIONS_SUBDOMAIN
  
        # Kubernetes Secrets :: Snowflake
        - name: SF_USER
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: sf_user
        - name: SF_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tap-secrets
              key: sf_password

        # Kubernetes Secrets :: Airflow
        - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              name: airflow
              key: db_connection
        - name: AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT
          value: "120"
        - name: AIRFLOW__CORE__EXECUTOR
          value: "LocalExecutor"

      # CloudSQL Proxy :: Container
      - name: cloud-sql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy
        command:
          - "/cloud_sql_proxy"

          # If connecting from a VPC-native GKE cluster, you can use the
          # following flag to have the proxy connect over private IP
          # - "-ip_address_types=PRIVATE"

          # Replace DB_PORT with the port the proxy should listen on
          # Defaults: MySQL: 3306, Postgres: 5432, SQLServer: 1433
          - "-instances=gitlab-analysis:us-west1:meltano=tcp:5432"

          # This flag specifies where the service account key can be found
          - "-credential_file=/secrets/service_account.json"
        securityContext:
          # The default Cloud SQL proxy image runs as the
          # "nonroot" user and group (uid: 65532) by default.
          runAsNonRoot: true

        # Volume Mounts :: CloudSQL Proxy Container
        volumeMounts:
        - name: k8s-sql-volume
          mountPath: /secrets/
          readOnly: true

      # Volumes :: Pod
      volumes:
      - name: k8s-sql-volume
        secret:
          secretName: cloud-sql
